// Code generated by MockGen. DO NOT EDIT.
// Source: ./authorization.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kodefluence/altair/plugin/oauth/entity"
	db "github.com/kodefluence/monorepo/db"
	exception "github.com/kodefluence/monorepo/exception"
	kontext "github.com/kodefluence/monorepo/kontext"
)

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// AccessGrant mocks base method.
func (m *MockFormatter) AccessGrant(e entity.OauthAccessGrant) entity.OauthAccessGrantJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessGrant", e)
	ret0, _ := ret[0].(entity.OauthAccessGrantJSON)
	return ret0
}

// AccessGrant indicates an expected call of AccessGrant.
func (mr *MockFormatterMockRecorder) AccessGrant(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessGrant", reflect.TypeOf((*MockFormatter)(nil).AccessGrant), e)
}

// AccessGrantFromAuthorizationRequestInsertable mocks base method.
func (m *MockFormatter) AccessGrantFromAuthorizationRequestInsertable(r entity.AuthorizationRequestJSON, application entity.OauthApplication) entity.OauthAccessGrantInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessGrantFromAuthorizationRequestInsertable", r, application)
	ret0, _ := ret[0].(entity.OauthAccessGrantInsertable)
	return ret0
}

// AccessGrantFromAuthorizationRequestInsertable indicates an expected call of AccessGrantFromAuthorizationRequestInsertable.
func (mr *MockFormatterMockRecorder) AccessGrantFromAuthorizationRequestInsertable(r, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessGrantFromAuthorizationRequestInsertable", reflect.TypeOf((*MockFormatter)(nil).AccessGrantFromAuthorizationRequestInsertable), r, application)
}

// AccessToken mocks base method.
func (m *MockFormatter) AccessToken(e entity.OauthAccessToken, redirectURI string, refreshTokenJSON *entity.OauthRefreshTokenJSON) entity.OauthAccessTokenJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessToken", e, redirectURI, refreshTokenJSON)
	ret0, _ := ret[0].(entity.OauthAccessTokenJSON)
	return ret0
}

// AccessToken indicates an expected call of AccessToken.
func (mr *MockFormatterMockRecorder) AccessToken(e, redirectURI, refreshTokenJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockFormatter)(nil).AccessToken), e, redirectURI, refreshTokenJSON)
}

// AccessTokenFromAuthorizationRequestInsertable mocks base method.
func (m *MockFormatter) AccessTokenFromAuthorizationRequestInsertable(r entity.AuthorizationRequestJSON, application entity.OauthApplication) entity.OauthAccessTokenInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenFromAuthorizationRequestInsertable", r, application)
	ret0, _ := ret[0].(entity.OauthAccessTokenInsertable)
	return ret0
}

// AccessTokenFromAuthorizationRequestInsertable indicates an expected call of AccessTokenFromAuthorizationRequestInsertable.
func (mr *MockFormatterMockRecorder) AccessTokenFromAuthorizationRequestInsertable(r, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenFromAuthorizationRequestInsertable", reflect.TypeOf((*MockFormatter)(nil).AccessTokenFromAuthorizationRequestInsertable), r, application)
}

// AccessTokenFromOauthAccessGrantInsertable mocks base method.
func (m *MockFormatter) AccessTokenFromOauthAccessGrantInsertable(oauthAccessGrant entity.OauthAccessGrant, application entity.OauthApplication) entity.OauthAccessTokenInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenFromOauthAccessGrantInsertable", oauthAccessGrant, application)
	ret0, _ := ret[0].(entity.OauthAccessTokenInsertable)
	return ret0
}

// AccessTokenFromOauthAccessGrantInsertable indicates an expected call of AccessTokenFromOauthAccessGrantInsertable.
func (mr *MockFormatterMockRecorder) AccessTokenFromOauthAccessGrantInsertable(oauthAccessGrant, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenFromOauthAccessGrantInsertable", reflect.TypeOf((*MockFormatter)(nil).AccessTokenFromOauthAccessGrantInsertable), oauthAccessGrant, application)
}

// AccessTokenFromOauthRefreshTokenInsertable mocks base method.
func (m *MockFormatter) AccessTokenFromOauthRefreshTokenInsertable(application entity.OauthApplication, accessToken entity.OauthAccessToken) entity.OauthAccessTokenInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenFromOauthRefreshTokenInsertable", application, accessToken)
	ret0, _ := ret[0].(entity.OauthAccessTokenInsertable)
	return ret0
}

// AccessTokenFromOauthRefreshTokenInsertable indicates an expected call of AccessTokenFromOauthRefreshTokenInsertable.
func (mr *MockFormatterMockRecorder) AccessTokenFromOauthRefreshTokenInsertable(application, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenFromOauthRefreshTokenInsertable", reflect.TypeOf((*MockFormatter)(nil).AccessTokenFromOauthRefreshTokenInsertable), application, accessToken)
}

// OauthApplicationInsertable mocks base method.
func (m *MockFormatter) OauthApplicationInsertable(r entity.OauthApplicationJSON) entity.OauthApplicationInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OauthApplicationInsertable", r)
	ret0, _ := ret[0].(entity.OauthApplicationInsertable)
	return ret0
}

// OauthApplicationInsertable indicates an expected call of OauthApplicationInsertable.
func (mr *MockFormatterMockRecorder) OauthApplicationInsertable(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OauthApplicationInsertable", reflect.TypeOf((*MockFormatter)(nil).OauthApplicationInsertable), r)
}

// RefreshToken mocks base method.
func (m *MockFormatter) RefreshToken(e entity.OauthRefreshToken) entity.OauthRefreshTokenJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", e)
	ret0, _ := ret[0].(entity.OauthRefreshTokenJSON)
	return ret0
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockFormatterMockRecorder) RefreshToken(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockFormatter)(nil).RefreshToken), e)
}

// RefreshTokenInsertable mocks base method.
func (m *MockFormatter) RefreshTokenInsertable(application entity.OauthApplication, accessToken entity.OauthAccessToken) entity.OauthRefreshTokenInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenInsertable", application, accessToken)
	ret0, _ := ret[0].(entity.OauthRefreshTokenInsertable)
	return ret0
}

// RefreshTokenInsertable indicates an expected call of RefreshTokenInsertable.
func (mr *MockFormatterMockRecorder) RefreshTokenInsertable(application, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenInsertable", reflect.TypeOf((*MockFormatter)(nil).RefreshTokenInsertable), application, accessToken)
}

// MockOauthAccessGrantRepository is a mock of OauthAccessGrantRepository interface.
type MockOauthAccessGrantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthAccessGrantRepositoryMockRecorder
}

// MockOauthAccessGrantRepositoryMockRecorder is the mock recorder for MockOauthAccessGrantRepository.
type MockOauthAccessGrantRepositoryMockRecorder struct {
	mock *MockOauthAccessGrantRepository
}

// NewMockOauthAccessGrantRepository creates a new mock instance.
func NewMockOauthAccessGrantRepository(ctrl *gomock.Controller) *MockOauthAccessGrantRepository {
	mock := &MockOauthAccessGrantRepository{ctrl: ctrl}
	mock.recorder = &MockOauthAccessGrantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthAccessGrantRepository) EXPECT() *MockOauthAccessGrantRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOauthAccessGrantRepository) Create(ktx kontext.Context, data entity.OauthAccessGrantInsertable, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ktx, data, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOauthAccessGrantRepositoryMockRecorder) Create(ktx, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOauthAccessGrantRepository)(nil).Create), ktx, data, tx)
}

// One mocks base method.
func (m *MockOauthAccessGrantRepository) One(ktx kontext.Context, ID int, tx db.TX) (entity.OauthAccessGrant, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ktx, ID, tx)
	ret0, _ := ret[0].(entity.OauthAccessGrant)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockOauthAccessGrantRepositoryMockRecorder) One(ktx, ID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockOauthAccessGrantRepository)(nil).One), ktx, ID, tx)
}

// OneByCode mocks base method.
func (m *MockOauthAccessGrantRepository) OneByCode(ktx kontext.Context, code string, tx db.TX) (entity.OauthAccessGrant, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByCode", ktx, code, tx)
	ret0, _ := ret[0].(entity.OauthAccessGrant)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// OneByCode indicates an expected call of OneByCode.
func (mr *MockOauthAccessGrantRepositoryMockRecorder) OneByCode(ktx, code, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByCode", reflect.TypeOf((*MockOauthAccessGrantRepository)(nil).OneByCode), ktx, code, tx)
}

// Revoke mocks base method.
func (m *MockOauthAccessGrantRepository) Revoke(ktx kontext.Context, code string, tx db.TX) exception.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ktx, code, tx)
	ret0, _ := ret[0].(exception.Exception)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockOauthAccessGrantRepositoryMockRecorder) Revoke(ktx, code, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockOauthAccessGrantRepository)(nil).Revoke), ktx, code, tx)
}

// MockOauthAccessTokenRepository is a mock of OauthAccessTokenRepository interface.
type MockOauthAccessTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthAccessTokenRepositoryMockRecorder
}

// MockOauthAccessTokenRepositoryMockRecorder is the mock recorder for MockOauthAccessTokenRepository.
type MockOauthAccessTokenRepositoryMockRecorder struct {
	mock *MockOauthAccessTokenRepository
}

// NewMockOauthAccessTokenRepository creates a new mock instance.
func NewMockOauthAccessTokenRepository(ctrl *gomock.Controller) *MockOauthAccessTokenRepository {
	mock := &MockOauthAccessTokenRepository{ctrl: ctrl}
	mock.recorder = &MockOauthAccessTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthAccessTokenRepository) EXPECT() *MockOauthAccessTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOauthAccessTokenRepository) Create(ktx kontext.Context, data entity.OauthAccessTokenInsertable, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ktx, data, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOauthAccessTokenRepositoryMockRecorder) Create(ktx, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOauthAccessTokenRepository)(nil).Create), ktx, data, tx)
}

// One mocks base method.
func (m *MockOauthAccessTokenRepository) One(ktx kontext.Context, ID int, tx db.TX) (entity.OauthAccessToken, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ktx, ID, tx)
	ret0, _ := ret[0].(entity.OauthAccessToken)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockOauthAccessTokenRepositoryMockRecorder) One(ktx, ID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockOauthAccessTokenRepository)(nil).One), ktx, ID, tx)
}

// OneByToken mocks base method.
func (m *MockOauthAccessTokenRepository) OneByToken(ktx kontext.Context, token string, tx db.TX) (entity.OauthAccessToken, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByToken", ktx, token, tx)
	ret0, _ := ret[0].(entity.OauthAccessToken)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// OneByToken indicates an expected call of OneByToken.
func (mr *MockOauthAccessTokenRepositoryMockRecorder) OneByToken(ktx, token, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByToken", reflect.TypeOf((*MockOauthAccessTokenRepository)(nil).OneByToken), ktx, token, tx)
}

// Revoke mocks base method.
func (m *MockOauthAccessTokenRepository) Revoke(ktx kontext.Context, token string, tx db.TX) exception.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ktx, token, tx)
	ret0, _ := ret[0].(exception.Exception)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockOauthAccessTokenRepositoryMockRecorder) Revoke(ktx, token, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockOauthAccessTokenRepository)(nil).Revoke), ktx, token, tx)
}

// MockOauthApplicationRepository is a mock of OauthApplicationRepository interface.
type MockOauthApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthApplicationRepositoryMockRecorder
}

// MockOauthApplicationRepositoryMockRecorder is the mock recorder for MockOauthApplicationRepository.
type MockOauthApplicationRepositoryMockRecorder struct {
	mock *MockOauthApplicationRepository
}

// NewMockOauthApplicationRepository creates a new mock instance.
func NewMockOauthApplicationRepository(ctrl *gomock.Controller) *MockOauthApplicationRepository {
	mock := &MockOauthApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockOauthApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthApplicationRepository) EXPECT() *MockOauthApplicationRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockOauthApplicationRepository) Count(ktx kontext.Context, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ktx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockOauthApplicationRepositoryMockRecorder) Count(ktx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Count), ktx, tx)
}

// Create mocks base method.
func (m *MockOauthApplicationRepository) Create(ktx kontext.Context, data entity.OauthApplicationInsertable, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ktx, data, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOauthApplicationRepositoryMockRecorder) Create(ktx, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Create), ktx, data, tx)
}

// One mocks base method.
func (m *MockOauthApplicationRepository) One(ktx kontext.Context, ID int, tx db.TX) (entity.OauthApplication, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ktx, ID, tx)
	ret0, _ := ret[0].(entity.OauthApplication)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockOauthApplicationRepositoryMockRecorder) One(ktx, ID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockOauthApplicationRepository)(nil).One), ktx, ID, tx)
}

// OneByUIDandSecret mocks base method.
func (m *MockOauthApplicationRepository) OneByUIDandSecret(ktx kontext.Context, clientUID, clientSecret string, tx db.TX) (entity.OauthApplication, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByUIDandSecret", ktx, clientUID, clientSecret, tx)
	ret0, _ := ret[0].(entity.OauthApplication)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// OneByUIDandSecret indicates an expected call of OneByUIDandSecret.
func (mr *MockOauthApplicationRepositoryMockRecorder) OneByUIDandSecret(ktx, clientUID, clientSecret, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByUIDandSecret", reflect.TypeOf((*MockOauthApplicationRepository)(nil).OneByUIDandSecret), ktx, clientUID, clientSecret, tx)
}

// Paginate mocks base method.
func (m *MockOauthApplicationRepository) Paginate(ktx kontext.Context, offset, limit int, tx db.TX) ([]entity.OauthApplication, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paginate", ktx, offset, limit, tx)
	ret0, _ := ret[0].([]entity.OauthApplication)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Paginate indicates an expected call of Paginate.
func (mr *MockOauthApplicationRepositoryMockRecorder) Paginate(ktx, offset, limit, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Paginate), ktx, offset, limit, tx)
}

// Update mocks base method.
func (m *MockOauthApplicationRepository) Update(ktx kontext.Context, ID int, data entity.OauthApplicationUpdateable, tx db.TX) exception.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ktx, ID, data, tx)
	ret0, _ := ret[0].(exception.Exception)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOauthApplicationRepositoryMockRecorder) Update(ktx, ID, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Update), ktx, ID, data, tx)
}

// MockOauthRefreshTokenRepository is a mock of OauthRefreshTokenRepository interface.
type MockOauthRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthRefreshTokenRepositoryMockRecorder
}

// MockOauthRefreshTokenRepositoryMockRecorder is the mock recorder for MockOauthRefreshTokenRepository.
type MockOauthRefreshTokenRepositoryMockRecorder struct {
	mock *MockOauthRefreshTokenRepository
}

// NewMockOauthRefreshTokenRepository creates a new mock instance.
func NewMockOauthRefreshTokenRepository(ctrl *gomock.Controller) *MockOauthRefreshTokenRepository {
	mock := &MockOauthRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockOauthRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthRefreshTokenRepository) EXPECT() *MockOauthRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOauthRefreshTokenRepository) Create(ktx kontext.Context, data entity.OauthRefreshTokenInsertable, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ktx, data, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOauthRefreshTokenRepositoryMockRecorder) Create(ktx, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOauthRefreshTokenRepository)(nil).Create), ktx, data, tx)
}

// One mocks base method.
func (m *MockOauthRefreshTokenRepository) One(ktx kontext.Context, ID int, tx db.TX) (entity.OauthRefreshToken, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ktx, ID, tx)
	ret0, _ := ret[0].(entity.OauthRefreshToken)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockOauthRefreshTokenRepositoryMockRecorder) One(ktx, ID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockOauthRefreshTokenRepository)(nil).One), ktx, ID, tx)
}

// OneByToken mocks base method.
func (m *MockOauthRefreshTokenRepository) OneByToken(ktx kontext.Context, token string, tx db.TX) (entity.OauthRefreshToken, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByToken", ktx, token, tx)
	ret0, _ := ret[0].(entity.OauthRefreshToken)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// OneByToken indicates an expected call of OneByToken.
func (mr *MockOauthRefreshTokenRepositoryMockRecorder) OneByToken(ktx, token, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByToken", reflect.TypeOf((*MockOauthRefreshTokenRepository)(nil).OneByToken), ktx, token, tx)
}

// Revoke mocks base method.
func (m *MockOauthRefreshTokenRepository) Revoke(ktx kontext.Context, token string, tx db.TX) exception.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ktx, token, tx)
	ret0, _ := ret[0].(exception.Exception)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockOauthRefreshTokenRepositoryMockRecorder) Revoke(ktx, token, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockOauthRefreshTokenRepository)(nil).Revoke), ktx, token, tx)
}
