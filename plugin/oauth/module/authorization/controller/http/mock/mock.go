// Code generated by MockGen. DO NOT EDIT.
// Source: ./http.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kodefluence/altair/plugin/oauth/entity"
	jsonapi "github.com/kodefluence/monorepo/jsonapi"
	kontext "github.com/kodefluence/monorepo/kontext"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// GrantAuthorizationCode mocks base method.
func (m *MockAuthorization) GrantAuthorizationCode(ktx kontext.Context, authorizationReq entity.AuthorizationRequestJSON) (interface{}, jsonapi.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAuthorizationCode", ktx, authorizationReq)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(jsonapi.Errors)
	return ret0, ret1
}

// GrantAuthorizationCode indicates an expected call of GrantAuthorizationCode.
func (mr *MockAuthorizationMockRecorder) GrantAuthorizationCode(ktx, authorizationReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthorizationCode", reflect.TypeOf((*MockAuthorization)(nil).GrantAuthorizationCode), ktx, authorizationReq)
}

// GrantToken mocks base method.
func (m *MockAuthorization) GrantToken(ktx kontext.Context, accessTokenReq entity.AccessTokenRequestJSON) (entity.OauthAccessTokenJSON, jsonapi.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantToken", ktx, accessTokenReq)
	ret0, _ := ret[0].(entity.OauthAccessTokenJSON)
	ret1, _ := ret[1].(jsonapi.Errors)
	return ret0, ret1
}

// GrantToken indicates an expected call of GrantToken.
func (mr *MockAuthorizationMockRecorder) GrantToken(ktx, accessTokenReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantToken", reflect.TypeOf((*MockAuthorization)(nil).GrantToken), ktx, accessTokenReq)
}

// RevokeToken mocks base method.
func (m *MockAuthorization) RevokeToken(ktx kontext.Context, revokeAccessTokenReq entity.RevokeAccessTokenRequestJSON) jsonapi.Errors {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", ktx, revokeAccessTokenReq)
	ret0, _ := ret[0].(jsonapi.Errors)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockAuthorizationMockRecorder) RevokeToken(ktx, revokeAccessTokenReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockAuthorization)(nil).RevokeToken), ktx, revokeAccessTokenReq)
}
