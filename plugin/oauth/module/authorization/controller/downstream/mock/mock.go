// Code generated by MockGen. DO NOT EDIT.
// Source: ./downstream.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kodefluence/altair/plugin/oauth/entity"
	db "github.com/kodefluence/monorepo/db"
	exception "github.com/kodefluence/monorepo/exception"
	kontext "github.com/kodefluence/monorepo/kontext"
)

// MockOauthAccessTokenRepository is a mock of OauthAccessTokenRepository interface.
type MockOauthAccessTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthAccessTokenRepositoryMockRecorder
}

// MockOauthAccessTokenRepositoryMockRecorder is the mock recorder for MockOauthAccessTokenRepository.
type MockOauthAccessTokenRepositoryMockRecorder struct {
	mock *MockOauthAccessTokenRepository
}

// NewMockOauthAccessTokenRepository creates a new mock instance.
func NewMockOauthAccessTokenRepository(ctrl *gomock.Controller) *MockOauthAccessTokenRepository {
	mock := &MockOauthAccessTokenRepository{ctrl: ctrl}
	mock.recorder = &MockOauthAccessTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthAccessTokenRepository) EXPECT() *MockOauthAccessTokenRepositoryMockRecorder {
	return m.recorder
}

// OneByToken mocks base method.
func (m *MockOauthAccessTokenRepository) OneByToken(ktx kontext.Context, token string, tx db.TX) (entity.OauthAccessToken, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByToken", ktx, token, tx)
	ret0, _ := ret[0].(entity.OauthAccessToken)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// OneByToken indicates an expected call of OneByToken.
func (mr *MockOauthAccessTokenRepositoryMockRecorder) OneByToken(ktx, token, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByToken", reflect.TypeOf((*MockOauthAccessTokenRepository)(nil).OneByToken), ktx, token, tx)
}
