// Code generated by MockGen. DO NOT EDIT.
// Source: ./application_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kodefluence/altair/plugin/oauth/entity"
	db "github.com/kodefluence/monorepo/db"
	exception "github.com/kodefluence/monorepo/exception"
	jsonapi "github.com/kodefluence/monorepo/jsonapi"
	kontext "github.com/kodefluence/monorepo/kontext"
)

// MockApiError is a mock of ApiError interface.
type MockApiError struct {
	ctrl     *gomock.Controller
	recorder *MockApiErrorMockRecorder
}

// MockApiErrorMockRecorder is the mock recorder for MockApiError.
type MockApiErrorMockRecorder struct {
	mock *MockApiError
}

// NewMockApiError creates a new mock instance.
func NewMockApiError(ctrl *gomock.Controller) *MockApiError {
	mock := &MockApiError{ctrl: ctrl}
	mock.recorder = &MockApiErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiError) EXPECT() *MockApiErrorMockRecorder {
	return m.recorder
}

// BadRequestError mocks base method.
func (m *MockApiError) BadRequestError(in string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BadRequestError", in)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// BadRequestError indicates an expected call of BadRequestError.
func (mr *MockApiErrorMockRecorder) BadRequestError(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequestError", reflect.TypeOf((*MockApiError)(nil).BadRequestError), in)
}

// ForbiddenError mocks base method.
func (m *MockApiError) ForbiddenError(ktx kontext.Context, entityType, reason string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForbiddenError", ktx, entityType, reason)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// ForbiddenError indicates an expected call of ForbiddenError.
func (mr *MockApiErrorMockRecorder) ForbiddenError(ktx, entityType, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForbiddenError", reflect.TypeOf((*MockApiError)(nil).ForbiddenError), ktx, entityType, reason)
}

// InternalServerError mocks base method.
func (m *MockApiError) InternalServerError(ktx kontext.Context) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalServerError", ktx)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError.
func (mr *MockApiErrorMockRecorder) InternalServerError(ktx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockApiError)(nil).InternalServerError), ktx)
}

// NotFoundError mocks base method.
func (m *MockApiError) NotFoundError(ktx kontext.Context, entityType string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFoundError", ktx, entityType)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// NotFoundError indicates an expected call of NotFoundError.
func (mr *MockApiErrorMockRecorder) NotFoundError(ktx, entityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFoundError", reflect.TypeOf((*MockApiError)(nil).NotFoundError), ktx, entityType)
}

// UnauthorizedError mocks base method.
func (m *MockApiError) UnauthorizedError() jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnauthorizedError")
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// UnauthorizedError indicates an expected call of UnauthorizedError.
func (mr *MockApiErrorMockRecorder) UnauthorizedError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnauthorizedError", reflect.TypeOf((*MockApiError)(nil).UnauthorizedError))
}

// ValidationError mocks base method.
func (m *MockApiError) ValidationError(msg string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationError", msg)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// ValidationError indicates an expected call of ValidationError.
func (mr *MockApiErrorMockRecorder) ValidationError(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationError", reflect.TypeOf((*MockApiError)(nil).ValidationError), msg)
}

// MockOauthApplicationRepository is a mock of OauthApplicationRepository interface.
type MockOauthApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthApplicationRepositoryMockRecorder
}

// MockOauthApplicationRepositoryMockRecorder is the mock recorder for MockOauthApplicationRepository.
type MockOauthApplicationRepositoryMockRecorder struct {
	mock *MockOauthApplicationRepository
}

// NewMockOauthApplicationRepository creates a new mock instance.
func NewMockOauthApplicationRepository(ctrl *gomock.Controller) *MockOauthApplicationRepository {
	mock := &MockOauthApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockOauthApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthApplicationRepository) EXPECT() *MockOauthApplicationRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockOauthApplicationRepository) Count(ktx kontext.Context, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ktx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockOauthApplicationRepositoryMockRecorder) Count(ktx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Count), ktx, tx)
}

// Create mocks base method.
func (m *MockOauthApplicationRepository) Create(ktx kontext.Context, data entity.OauthApplicationInsertable, tx db.TX) (int, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ktx, data, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOauthApplicationRepositoryMockRecorder) Create(ktx, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Create), ktx, data, tx)
}

// One mocks base method.
func (m *MockOauthApplicationRepository) One(ktx kontext.Context, ID int, tx db.TX) (entity.OauthApplication, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ktx, ID, tx)
	ret0, _ := ret[0].(entity.OauthApplication)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockOauthApplicationRepositoryMockRecorder) One(ktx, ID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockOauthApplicationRepository)(nil).One), ktx, ID, tx)
}

// OneByUIDandSecret mocks base method.
func (m *MockOauthApplicationRepository) OneByUIDandSecret(ktx kontext.Context, clientUID, clientSecret string, tx db.TX) (entity.OauthApplication, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByUIDandSecret", ktx, clientUID, clientSecret, tx)
	ret0, _ := ret[0].(entity.OauthApplication)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// OneByUIDandSecret indicates an expected call of OneByUIDandSecret.
func (mr *MockOauthApplicationRepositoryMockRecorder) OneByUIDandSecret(ktx, clientUID, clientSecret, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByUIDandSecret", reflect.TypeOf((*MockOauthApplicationRepository)(nil).OneByUIDandSecret), ktx, clientUID, clientSecret, tx)
}

// Paginate mocks base method.
func (m *MockOauthApplicationRepository) Paginate(ktx kontext.Context, offset, limit int, tx db.TX) ([]entity.OauthApplication, exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paginate", ktx, offset, limit, tx)
	ret0, _ := ret[0].([]entity.OauthApplication)
	ret1, _ := ret[1].(exception.Exception)
	return ret0, ret1
}

// Paginate indicates an expected call of Paginate.
func (mr *MockOauthApplicationRepositoryMockRecorder) Paginate(ktx, offset, limit, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Paginate), ktx, offset, limit, tx)
}

// Update mocks base method.
func (m *MockOauthApplicationRepository) Update(ktx kontext.Context, ID int, data entity.OauthApplicationUpdateable, tx db.TX) exception.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ktx, ID, data, tx)
	ret0, _ := ret[0].(exception.Exception)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOauthApplicationRepositoryMockRecorder) Update(ktx, ID, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOauthApplicationRepository)(nil).Update), ktx, ID, data, tx)
}

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockFormatter) Application(application entity.OauthApplication) entity.OauthApplicationJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", application)
	ret0, _ := ret[0].(entity.OauthApplicationJSON)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockFormatterMockRecorder) Application(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockFormatter)(nil).Application), application)
}

// ApplicationList mocks base method.
func (m *MockFormatter) ApplicationList(applications []entity.OauthApplication) []entity.OauthApplicationJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationList", applications)
	ret0, _ := ret[0].([]entity.OauthApplicationJSON)
	return ret0
}

// ApplicationList indicates an expected call of ApplicationList.
func (mr *MockFormatterMockRecorder) ApplicationList(applications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationList", reflect.TypeOf((*MockFormatter)(nil).ApplicationList), applications)
}

// OauthApplicationInsertable mocks base method.
func (m *MockFormatter) OauthApplicationInsertable(r entity.OauthApplicationJSON) entity.OauthApplicationInsertable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OauthApplicationInsertable", r)
	ret0, _ := ret[0].(entity.OauthApplicationInsertable)
	return ret0
}

// OauthApplicationInsertable indicates an expected call of OauthApplicationInsertable.
func (mr *MockFormatterMockRecorder) OauthApplicationInsertable(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OauthApplicationInsertable", reflect.TypeOf((*MockFormatter)(nil).OauthApplicationInsertable), r)
}
