// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/kodefluence/altair/entity"
	module "github.com/kodefluence/altair/module"
	jsonapi "github.com/kodefluence/monorepo/jsonapi"
	kontext "github.com/kodefluence/monorepo/kontext"
	cobra "github.com/spf13/cobra"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Controller mocks base method.
func (m *MockApp) Controller() module.Controller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(module.Controller)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockAppMockRecorder) Controller() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockApp)(nil).Controller))
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// BasicAuthPassword mocks base method.
func (m *MockConfig) BasicAuthPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BasicAuthPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// BasicAuthPassword indicates an expected call of BasicAuthPassword.
func (mr *MockConfigMockRecorder) BasicAuthPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BasicAuthPassword", reflect.TypeOf((*MockConfig)(nil).BasicAuthPassword))
}

// BasicAuthUsername mocks base method.
func (m *MockConfig) BasicAuthUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BasicAuthUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// BasicAuthUsername indicates an expected call of BasicAuthUsername.
func (mr *MockConfigMockRecorder) BasicAuthUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BasicAuthUsername", reflect.TypeOf((*MockConfig)(nil).BasicAuthUsername))
}

// Dump mocks base method.
func (m *MockConfig) Dump() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockConfigMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockConfig)(nil).Dump))
}

// Port mocks base method.
func (m *MockConfig) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockConfigMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockConfig)(nil).Port))
}

// ProxyHost mocks base method.
func (m *MockConfig) ProxyHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProxyHost indicates an expected call of ProxyHost.
func (mr *MockConfigMockRecorder) ProxyHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyHost", reflect.TypeOf((*MockConfig)(nil).ProxyHost))
}

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockPlugin) Dump() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockPluginMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockPlugin)(nil).Dump))
}

// Exist mocks base method.
func (m *MockPlugin) Exist(plugin string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", plugin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockPluginMockRecorder) Exist(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockPlugin)(nil).Exist), plugin)
}

// List mocks base method.
func (m *MockPlugin) List() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockPluginMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlugin)(nil).List))
}

// Plugin mocks base method.
func (m *MockPlugin) Plugin(plugin string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Plugin", plugin)
}

// Plugin indicates an expected call of Plugin.
func (mr *MockPluginMockRecorder) Plugin(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugin", reflect.TypeOf((*MockPlugin)(nil).Plugin), plugin)
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// InjectCommand mocks base method.
func (m *MockController) InjectCommand(command ...module.CommandController) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range command {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectCommand", varargs...)
}

// InjectCommand indicates an expected call of InjectCommand.
func (mr *MockControllerMockRecorder) InjectCommand(command ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectCommand", reflect.TypeOf((*MockController)(nil).InjectCommand), command...)
}

// InjectDownstream mocks base method.
func (m *MockController) InjectDownstream(downstream ...module.DownstreamController) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range downstream {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectDownstream", varargs...)
}

// InjectDownstream indicates an expected call of InjectDownstream.
func (mr *MockControllerMockRecorder) InjectDownstream(downstream ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectDownstream", reflect.TypeOf((*MockController)(nil).InjectDownstream), downstream...)
}

// InjectHTTP mocks base method.
func (m *MockController) InjectHTTP(http ...module.HttpController) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range http {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectHTTP", varargs...)
}

// InjectHTTP indicates an expected call of InjectHTTP.
func (mr *MockControllerMockRecorder) InjectHTTP(http ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectHTTP", reflect.TypeOf((*MockController)(nil).InjectHTTP), http...)
}

// InjectMetric mocks base method.
func (m *MockController) InjectMetric(http ...module.MetricController) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range http {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectMetric", varargs...)
}

// InjectMetric indicates an expected call of InjectMetric.
func (mr *MockControllerMockRecorder) InjectMetric(http ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectMetric", reflect.TypeOf((*MockController)(nil).InjectMetric), http...)
}

// ListDownstream mocks base method.
func (m *MockController) ListDownstream() []module.DownstreamController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownstream")
	ret0, _ := ret[0].([]module.DownstreamController)
	return ret0
}

// ListDownstream indicates an expected call of ListDownstream.
func (mr *MockControllerMockRecorder) ListDownstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownstream", reflect.TypeOf((*MockController)(nil).ListDownstream))
}

// ListMetric mocks base method.
func (m *MockController) ListMetric() []module.MetricController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetric")
	ret0, _ := ret[0].([]module.MetricController)
	return ret0
}

// ListMetric indicates an expected call of ListMetric.
func (mr *MockControllerMockRecorder) ListMetric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetric", reflect.TypeOf((*MockController)(nil).ListMetric))
}

// MockMetricController is a mock of MetricController interface.
type MockMetricController struct {
	ctrl     *gomock.Controller
	recorder *MockMetricControllerMockRecorder
}

// MockMetricControllerMockRecorder is the mock recorder for MockMetricController.
type MockMetricControllerMockRecorder struct {
	mock *MockMetricController
}

// NewMockMetricController creates a new mock instance.
func NewMockMetricController(ctrl *gomock.Controller) *MockMetricController {
	mock := &MockMetricController{ctrl: ctrl}
	mock.recorder = &MockMetricControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricController) EXPECT() *MockMetricControllerMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *MockMetricController) Inc(metricName string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inc", metricName, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inc indicates an expected call of Inc.
func (mr *MockMetricControllerMockRecorder) Inc(metricName, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockMetricController)(nil).Inc), metricName, labels)
}

// InjectCounter mocks base method.
func (m *MockMetricController) InjectCounter(metricName string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{metricName}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectCounter", varargs...)
}

// InjectCounter indicates an expected call of InjectCounter.
func (mr *MockMetricControllerMockRecorder) InjectCounter(metricName interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{metricName}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectCounter", reflect.TypeOf((*MockMetricController)(nil).InjectCounter), varargs...)
}

// InjectHistogram mocks base method.
func (m *MockMetricController) InjectHistogram(metricName string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{metricName}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectHistogram", varargs...)
}

// InjectHistogram indicates an expected call of InjectHistogram.
func (mr *MockMetricControllerMockRecorder) InjectHistogram(metricName interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{metricName}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectHistogram", reflect.TypeOf((*MockMetricController)(nil).InjectHistogram), varargs...)
}

// Observe mocks base method.
func (m *MockMetricController) Observe(metricName string, value float64, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Observe", metricName, value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// Observe indicates an expected call of Observe.
func (mr *MockMetricControllerMockRecorder) Observe(metricName, value, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockMetricController)(nil).Observe), metricName, value, labels)
}

// MockHttpController is a mock of HttpController interface.
type MockHttpController struct {
	ctrl     *gomock.Controller
	recorder *MockHttpControllerMockRecorder
}

// MockHttpControllerMockRecorder is the mock recorder for MockHttpController.
type MockHttpControllerMockRecorder struct {
	mock *MockHttpController
}

// NewMockHttpController creates a new mock instance.
func NewMockHttpController(ctrl *gomock.Controller) *MockHttpController {
	mock := &MockHttpController{ctrl: ctrl}
	mock.recorder = &MockHttpControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpController) EXPECT() *MockHttpControllerMockRecorder {
	return m.recorder
}

// Control mocks base method.
func (m *MockHttpController) Control(ktx kontext.Context, c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Control", ktx, c)
}

// Control indicates an expected call of Control.
func (mr *MockHttpControllerMockRecorder) Control(ktx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Control", reflect.TypeOf((*MockHttpController)(nil).Control), ktx, c)
}

// Method mocks base method.
func (m *MockHttpController) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockHttpControllerMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockHttpController)(nil).Method))
}

// Path mocks base method.
func (m *MockHttpController) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockHttpControllerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockHttpController)(nil).Path))
}

// MockCommandController is a mock of CommandController interface.
type MockCommandController struct {
	ctrl     *gomock.Controller
	recorder *MockCommandControllerMockRecorder
}

// MockCommandControllerMockRecorder is the mock recorder for MockCommandController.
type MockCommandControllerMockRecorder struct {
	mock *MockCommandController
}

// NewMockCommandController creates a new mock instance.
func NewMockCommandController(ctrl *gomock.Controller) *MockCommandController {
	mock := &MockCommandController{ctrl: ctrl}
	mock.recorder = &MockCommandControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandController) EXPECT() *MockCommandControllerMockRecorder {
	return m.recorder
}

// Example mocks base method.
func (m *MockCommandController) Example() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Example")
	ret0, _ := ret[0].(string)
	return ret0
}

// Example indicates an expected call of Example.
func (mr *MockCommandControllerMockRecorder) Example() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Example", reflect.TypeOf((*MockCommandController)(nil).Example))
}

// Run mocks base method.
func (m *MockCommandController) Run(cmd *cobra.Command, args []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", cmd, args)
}

// Run indicates an expected call of Run.
func (mr *MockCommandControllerMockRecorder) Run(cmd, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandController)(nil).Run), cmd, args)
}

// Short mocks base method.
func (m *MockCommandController) Short() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Short")
	ret0, _ := ret[0].(string)
	return ret0
}

// Short indicates an expected call of Short.
func (mr *MockCommandControllerMockRecorder) Short() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Short", reflect.TypeOf((*MockCommandController)(nil).Short))
}

// Use mocks base method.
func (m *MockCommandController) Use() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(string)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockCommandControllerMockRecorder) Use() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockCommandController)(nil).Use))
}

// MockDownstreamController is a mock of DownstreamController interface.
type MockDownstreamController struct {
	ctrl     *gomock.Controller
	recorder *MockDownstreamControllerMockRecorder
}

// MockDownstreamControllerMockRecorder is the mock recorder for MockDownstreamController.
type MockDownstreamControllerMockRecorder struct {
	mock *MockDownstreamController
}

// NewMockDownstreamController creates a new mock instance.
func NewMockDownstreamController(ctrl *gomock.Controller) *MockDownstreamController {
	mock := &MockDownstreamController{ctrl: ctrl}
	mock.recorder = &MockDownstreamControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownstreamController) EXPECT() *MockDownstreamControllerMockRecorder {
	return m.recorder
}

// Intervene mocks base method.
func (m *MockDownstreamController) Intervene(c *gin.Context, proxyReq *http.Request, r module.RouterPath) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intervene", c, proxyReq, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Intervene indicates an expected call of Intervene.
func (mr *MockDownstreamControllerMockRecorder) Intervene(c, proxyReq, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intervene", reflect.TypeOf((*MockDownstreamController)(nil).Intervene), c, proxyReq, r)
}

// Name mocks base method.
func (m *MockDownstreamController) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDownstreamControllerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDownstreamController)(nil).Name))
}

// MockApiError is a mock of ApiError interface.
type MockApiError struct {
	ctrl     *gomock.Controller
	recorder *MockApiErrorMockRecorder
}

// MockApiErrorMockRecorder is the mock recorder for MockApiError.
type MockApiErrorMockRecorder struct {
	mock *MockApiError
}

// NewMockApiError creates a new mock instance.
func NewMockApiError(ctrl *gomock.Controller) *MockApiError {
	mock := &MockApiError{ctrl: ctrl}
	mock.recorder = &MockApiErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiError) EXPECT() *MockApiErrorMockRecorder {
	return m.recorder
}

// BadRequestError mocks base method.
func (m *MockApiError) BadRequestError(in string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BadRequestError", in)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// BadRequestError indicates an expected call of BadRequestError.
func (mr *MockApiErrorMockRecorder) BadRequestError(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequestError", reflect.TypeOf((*MockApiError)(nil).BadRequestError), in)
}

// ForbiddenError mocks base method.
func (m *MockApiError) ForbiddenError(ktx kontext.Context, entityType, reason string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForbiddenError", ktx, entityType, reason)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// ForbiddenError indicates an expected call of ForbiddenError.
func (mr *MockApiErrorMockRecorder) ForbiddenError(ktx, entityType, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForbiddenError", reflect.TypeOf((*MockApiError)(nil).ForbiddenError), ktx, entityType, reason)
}

// InternalServerError mocks base method.
func (m *MockApiError) InternalServerError(ktx kontext.Context) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalServerError", ktx)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError.
func (mr *MockApiErrorMockRecorder) InternalServerError(ktx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockApiError)(nil).InternalServerError), ktx)
}

// NotFoundError mocks base method.
func (m *MockApiError) NotFoundError(ktx kontext.Context, entityType string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFoundError", ktx, entityType)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// NotFoundError indicates an expected call of NotFoundError.
func (mr *MockApiErrorMockRecorder) NotFoundError(ktx, entityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFoundError", reflect.TypeOf((*MockApiError)(nil).NotFoundError), ktx, entityType)
}

// UnauthorizedError mocks base method.
func (m *MockApiError) UnauthorizedError() jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnauthorizedError")
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// UnauthorizedError indicates an expected call of UnauthorizedError.
func (mr *MockApiErrorMockRecorder) UnauthorizedError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnauthorizedError", reflect.TypeOf((*MockApiError)(nil).UnauthorizedError))
}

// ValidationError mocks base method.
func (m *MockApiError) ValidationError(msg string) jsonapi.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationError", msg)
	ret0, _ := ret[0].(jsonapi.Option)
	return ret0
}

// ValidationError indicates an expected call of ValidationError.
func (mr *MockApiErrorMockRecorder) ValidationError(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationError", reflect.TypeOf((*MockApiError)(nil).ValidationError), msg)
}

// MockRouterPath is a mock of RouterPath interface.
type MockRouterPath struct {
	ctrl     *gomock.Controller
	recorder *MockRouterPathMockRecorder
}

// MockRouterPathMockRecorder is the mock recorder for MockRouterPath.
type MockRouterPathMockRecorder struct {
	mock *MockRouterPath
}

// NewMockRouterPath creates a new mock instance.
func NewMockRouterPath(ctrl *gomock.Controller) *MockRouterPath {
	mock := &MockRouterPath{ctrl: ctrl}
	mock.recorder = &MockRouterPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterPath) EXPECT() *MockRouterPathMockRecorder {
	return m.recorder
}

// GetAuth mocks base method.
func (m *MockRouterPath) GetAuth() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuth indicates an expected call of GetAuth.
func (mr *MockRouterPathMockRecorder) GetAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockRouterPath)(nil).GetAuth))
}

// GetScope mocks base method.
func (m *MockRouterPath) GetScope() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetScope indicates an expected call of GetScope.
func (mr *MockRouterPathMockRecorder) GetScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockRouterPath)(nil).GetScope))
}

// MockRouterCompiler is a mock of RouterCompiler interface.
type MockRouterCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockRouterCompilerMockRecorder
}

// MockRouterCompilerMockRecorder is the mock recorder for MockRouterCompiler.
type MockRouterCompilerMockRecorder struct {
	mock *MockRouterCompiler
}

// NewMockRouterCompiler creates a new mock instance.
func NewMockRouterCompiler(ctrl *gomock.Controller) *MockRouterCompiler {
	mock := &MockRouterCompiler{ctrl: ctrl}
	mock.recorder = &MockRouterCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterCompiler) EXPECT() *MockRouterCompilerMockRecorder {
	return m.recorder
}

// Compile mocks base method.
func (m *MockRouterCompiler) Compile(routesPath string) ([]entity.RouteObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", routesPath)
	ret0, _ := ret[0].([]entity.RouteObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockRouterCompilerMockRecorder) Compile(routesPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockRouterCompiler)(nil).Compile), routesPath)
}

// MockRouterForwarder is a mock of RouterForwarder interface.
type MockRouterForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockRouterForwarderMockRecorder
}

// MockRouterForwarderMockRecorder is the mock recorder for MockRouterForwarder.
type MockRouterForwarderMockRecorder struct {
	mock *MockRouterForwarder
}

// NewMockRouterForwarder creates a new mock instance.
func NewMockRouterForwarder(ctrl *gomock.Controller) *MockRouterForwarder {
	mock := &MockRouterForwarder{ctrl: ctrl}
	mock.recorder = &MockRouterForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterForwarder) EXPECT() *MockRouterForwarderMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockRouterForwarder) Generate(engine *gin.Engine, metric module.MetricController, routeObjects []entity.RouteObject, downStreamPlugin []module.DownstreamController) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", engine, metric, routeObjects, downStreamPlugin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockRouterForwarderMockRecorder) Generate(engine, metric, routeObjects, downStreamPlugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockRouterForwarder)(nil).Generate), engine, metric, routeObjects, downStreamPlugin)
}
